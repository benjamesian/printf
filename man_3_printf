.TH _PRINTF 3 "2019-07-30" "0.01" "_printf man page"
.SH NAME
.B _printf
- formatted output conversion
.SH SYNOPSIS
#include "holberton.h"

int _printf(const char *format, ...);
.SH DESCRIPTION
_printf produces output according to a \fIformat\fR as described below.  Output is written to \fIstdout\fR, the standard output stream.

This function writes the output under the control of a \fIformat\fR string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.
.SS Return value
Upon successful return, this function returns the number of characters printed (excluding the null byte used to end output to strings).
.SS Format of the format string
The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinaty characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a \fIconversion specifier\fR.  In between there may be (in this order) zero or one \fIflags\fR.

The arguments must correspond properly (after type promotion) with the conversion specifier.  By default, the arguments are used in the order given, where each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).
.SS The flag characters
The character % is followed by zero or one of the following flags:

.TP
#
The value should be converted to an "alternate form".  For o conversoins, the first character of the output string is made zero (by prefixing a 0 if it was not zero already).  For x and X conversions, a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it.
.TP
\' \'
(a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.
.TP
+
A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default a sign is used only for negative numbers.  A + overrides a space if both are used.
.SS The length modifier
Here, "integer conversion" stands for d, i, o, u, x, or X conversion.

.TP
h
A following integer conversion corresponds to a \fIshort int\fR or \fIunsigned short int\fR argument.
.TP
l
(ell) A following integer conversion corresponds to a \fIlong int\fR argument.
.SS The conversion specifier
A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:

.TP
d, i
The int argument is converted to signed decimal notation.
.TP
o, u, x, X
The \fIunsigned int\fR argument is converted to an unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and X) notation.  The letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions.
.TP
c
The \fIint\fR argument is converted to an \fIunsigned char\fR, and the resulting character is written.
.TP
s
The \fIconst char *\fR argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null byte ('\\0').
.TP
p
The \fIvoid *\fR pointer argument is printed in hexadecimal (as if by %#x).
.TP
%
A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
.SH EXAMPLE
To print the number 12345:

.nf
.RS
#include "holberton.h"
printf("My favourite number: %d\\n", 12345);
.RE
.fi
.SH BUGS
No known bugs.
.SH AUTHOR
Brent Muha, Ben Cook
